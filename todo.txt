
BUGS:
******************************
* Front desk When all races are completed the and a new race is made, the last race completed is again shown. Then non of the races will not be moved or removed at the front desk, untill a new race is made. (bad update)
* If the race roster is emptied and you create a new race, the Race controll will not see it. ??
* you can create and launch an race with no drivers.
* If a race is not started there is no flag, should be red!?

DONE(BUG?) - When the race session starts, the Lap-Line Observer sees a button for each car. Note: Sees all cars.

DONE- end race does not zero timer!
DONE the leaderborad shows cars with no drivers 
DONE the leader board sorts 0 as the smallest
DONE- the leaderBoard does not load on start race, but on lap start! (tie with start race emit)
DONE- lap line if started when the race controller session is started will already load the race. (tie with the timer or start race emit?)
DONE- the leader board can still mark a lap if the race is qued,but not started
DONE- the leader board get loaded when the lap linetracker emits a lap time. (start when- race is started.)
DONE -is idle flag red, yes!
*******************************

TEST:
TODO: - When the server is restarted, the system resumes with the exact same. I.e. the race counter continues counting down, and upcoming races are not lost.

MANDATORY:

TODO: The README.md file at the root of the project has a user guide, describing the core functionality of the user interfaces
TODO: The README.md file at the root of the project describes how to launch the project.
TODO:- Has been given a tablet which may be used in landscape or portrait DONE
TODO:- They must occupy a large tappable area).
TODO:The countdown timer is 1 minute in dev mode (instead of 10 minutes). -- USES the constant at the beggining of the race. only affecting the new races created. meaning anything created in regular mode will not change
TODO: The server waits 500ms to respond if an incorrect access key is entered in the interface.
TODO: The interface re-prompts the user to enter a correct access key when an incorrect access key is inserted.
TODO: The server will not start unless environment variables are set for interface access keys.
TODO: The environment variable access codes match the accepted access codes entered into the interfaces.
TODO: The server can be started with npm start
TODO: The server can be started in developer mode with npm run dev. --The countdown timer runs for 1 minute instead on 10 minutes.
TODO: The interfaces are reachable by devices on other networks (not just localhost).
TODO: The interfaces must be reachable by devices on other networks. For example, the interface must be reachable from a mobile phone browser, while the server and interfaces are served from a computer.
WIP- The Race Control interface is designed for a mobile interface.
TIMER
TODO:- edge-case functionali

CHECK:

CHECK- When the race is started, the following happens:
        - The race mode is changed to "Safe"
        - The leader board changes to the current race.
        - The Next Race screen switches to the subsequent race session.
        - The Safety Official sees race mode controls.

NEXT-RACE 

ty

RECEPTIONIST
The receptionist can see a list of upcoming races.
The receptionist can delete an upcoming race.
The receptionist can add new race sessions.
The receptionist can add/edit/remove drivers from a race.
It is not possible to have two drivers with the same name. name is unique // This does not imply it needs to check all the names just the names in the race.
Race sessions disappear from the Front Desk interface once it is safe to start. // who can make it safe if safe remove fr
The race drivers cannot be edited after the race is safe to start.
The upcoming race session, is displayed on the Next Race display.
The Next Race display switches to the subsequent race, once the current race is safe to start.
The Next Race display shows the drivers names, and the cars they're assigned to.
If there are no upcoming races, no sessions are displayed.



DONE MANDATORY: 

SAFETY OFFICIAL - AP KARL-HENDRIK
DONE- If there is no upcoming race after the last session is ended, the Safety Official sees no upcoming races message.
DONE- The safety official has one active button, which starts the race when pressed.


DONE- When the Safety Official selects "Safe", the Flag screen is green.
DONE- When the Safety Official selects "Hazard", the Flag screen is yellow.
DONE- When the Safety Official selects "Danger", the Flag screen is red.
DONE- When the Safety Official selects "Finish", the Flag screen is chequered.

DONE- Timer -When the race mode changes to "Finish", the race controls disappear, and a button appears to end the race session. --This happens when the timer counts down to zero.
DONE- it shows when nothing is next else it does nothing - When the Safety Official ends the race session, the next session appears on their interface. 
DONE- When the race session is ended, the Next Race display shows an additional message to proceed to the paddock.
DONE- When the race session is ended, the race mode changes to "Danger".

LAP-LINE OBSERVER
DONE- When the lap button is pressed for a car, the leader board is updated.  

-LEADER BOARD
DONE- The leaderboard shows the remaining time on the timer.  
DONE- The leaderboard shows the flag color for the current race mode.
DONE- The leaderboard is ordered by fastest lap times
DONE- The leaderboard shows the drivers name and car number. // get_driver_car_number
DONE -The leaderboard shows the fastest lap time for each car. //best_lap_time
DONE -The leaderboard shows the current lap for each car. // race_lap +1
DONE -The first lap starts when the car crosses the leader board for the first time.
DONE- Cars can still cross the lap line when the race is in finish mode.
DONE - The buttons must not function after the race is ended.
DONE- They should disappear or be visually disabled. (DONE)

SERVER-

DONE The server is written in Node.JS
DONE Communication between interfaces is in real-time. API calls must not be used to send data. 
DONE For example, when the race mode is changed by the Safety Official, the flag displays change in real time
DONE Communication between interfaces utilises messages sent via Socket.IO.

NPM START

DONE- The Front Desk, Race Control and Lap-line Tracker require access codes to function correctly.
DONE- The interfaces are reachable via their correct paths.

| Interface        | Persona           | Route               |
| ---------------- | ----------------- | ------------------- |
| Front Desk       | Receptionist      | `/front-desk`       | get here with the correct login!
| Race Control     | Safety Official   | `/race-control`     | get here with the correct login!
| Lap-line Tracker | Lap-line Observer | `/lap-line-tracker` | get here with the correct login!

| Leader Board     | Guest             | `leader-board`      | <div id = xxx >
| Next Race        | Race Driver       | `next-race`         |  --"--
| Race Countdown   | Race Driver       | `race-countdown`    |  --"--
| Race Flag        | Race Driver       | `race-flags`        |  --"--


DONE- The buttons disappear or are visibly disabled between races.
DONE- Communication between the interfaces certainly does not use a polling convention.
--

Example Scenario:
Real-time Chat Application: A WebSocket server could manage real-time communication between users.
When a message is sent by one user, the WebSocket server stores it in an SQLite database and immediately broadcasts it 
to other connected users.In summary, while SQLite cannot handle WebSocket connections directly, 
you can use a server application to bridge the gap, allowing WebSocket communication and SQLite database interactions to work together.

Extra
DONE- The system state is persisted. --> gets data from the DB in realtime! 
DONE- The receptionist can assign drivers to specific cars.